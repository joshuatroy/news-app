// Code generated by MockGen. DO NOT EDIT.
// Source: news-app/internal/cache (interfaces: Cache)

// Package cache is a generated GoMock package.
package cache

import (
	domain "news-app/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// AddArticlesToCache mocks base method.
func (m *MockCache) AddArticlesToCache(arg0 string, arg1 []domain.Article) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddArticlesToCache", arg0, arg1)
}

// AddArticlesToCache indicates an expected call of AddArticlesToCache.
func (mr *MockCacheMockRecorder) AddArticlesToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArticlesToCache", reflect.TypeOf((*MockCache)(nil).AddArticlesToCache), arg0, arg1)
}

// GetArticlesFromCache mocks base method.
func (m *MockCache) GetArticlesFromCache(arg0 string) ([]domain.Article, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticlesFromCache", arg0)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetArticlesFromCache indicates an expected call of GetArticlesFromCache.
func (mr *MockCacheMockRecorder) GetArticlesFromCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticlesFromCache", reflect.TypeOf((*MockCache)(nil).GetArticlesFromCache), arg0)
}
