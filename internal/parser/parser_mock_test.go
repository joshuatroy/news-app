// Code generated by MockGen. DO NOT EDIT.
// Source: news-app/internal/parser (interfaces: InternalParser)

// Package parser is a generated GoMock package.
package parser

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gofeed "github.com/mmcdole/gofeed"
)

// MockInternalParser is a mock of InternalParser interface.
type MockInternalParser struct {
	ctrl     *gomock.Controller
	recorder *MockInternalParserMockRecorder
}

// MockInternalParserMockRecorder is the mock recorder for MockInternalParser.
type MockInternalParserMockRecorder struct {
	mock *MockInternalParser
}

// NewMockInternalParser creates a new mock instance.
func NewMockInternalParser(ctrl *gomock.Controller) *MockInternalParser {
	mock := &MockInternalParser{ctrl: ctrl}
	mock.recorder = &MockInternalParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternalParser) EXPECT() *MockInternalParserMockRecorder {
	return m.recorder
}

// ParseURLWithContext mocks base method.
func (m *MockInternalParser) ParseURLWithContext(arg0 string, arg1 context.Context) (*gofeed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseURLWithContext", arg0, arg1)
	ret0, _ := ret[0].(*gofeed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseURLWithContext indicates an expected call of ParseURLWithContext.
func (mr *MockInternalParserMockRecorder) ParseURLWithContext(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseURLWithContext", reflect.TypeOf((*MockInternalParser)(nil).ParseURLWithContext), arg0, arg1)
}
